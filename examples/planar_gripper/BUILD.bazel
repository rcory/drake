# -*- python -*-

load("@drake//tools/install:install.bzl", "install")
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_binary",
    "drake_py_library",
)
load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
)
load("//tools/install:install_data.bzl", "install_data")
load(
    "@drake//tools/vector_gen:vector_gen.bzl",
    "drake_cc_vector_gen_library",
)

drake_cc_library(
    name = "planar_gripper_common",
    srcs = ["planar_gripper_common.cc"],
    hdrs = ["planar_gripper_common.h"],
    deps = [
        "//common:find_resource",
        "//multibody/plant",
        "//systems/lcm:lcm_interface_system",
        "@lcmtypes_robotlocomotion",
    ],
)

drake_cc_library(
    name = "brick_static_equilibrium_constraint",
    srcs = ["brick_static_equilibrium_constraint.cc"],
    hdrs = ["brick_static_equilibrium_constraint.h"],
    deps = [
        ":gripper_brick",
        ":gripper_brick_planning_constraint_helper",
        "//math:autodiff",
        "//multibody/inverse_kinematics:kinematic_constraint",
        "//multibody/plant",
        "//solvers:constraint",
        "//solvers:mathematical_program_lite",
    ],
)

drake_cc_library(
    name = "gripper_brick",
    srcs = ["gripper_brick.cc"],
    hdrs = ["gripper_brick.h"],
    data = [
        "//examples/planar_gripper:planar_brick.sdf",
        "//examples/planar_gripper:planar_gripper.sdf",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//common:find_resource",
        "//examples/planar_gripper:planar_gripper_common",
        "//geometry:geometry_visualization",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/analysis:simulator",
        "//systems/framework:diagram",
    ],
)

drake_cc_library(
    name = "finger_brick",
    srcs = ["finger_brick.cc"],
    hdrs = ["finger_brick.h"],
    deps = [
        "//multibody/plant",
    ],
)

drake_cc_library(
    name = "planar_finger_qp",
    srcs = ["planar_finger_qp.cc"],
    hdrs = ["planar_finger_qp.h"],
    deps = [
        ":gripper_brick",
        "//multibody/plant",
        "//solvers:mathematical_program_lite",
        "//solvers:solve",
        "//systems/controllers:state_feedback_controller_interface",
        "//systems/framework:leaf_system",
    ],
)

drake_cc_library(
    name = "brick_qp",
    srcs = ["brick_qp.cc"],
    hdrs = ["brick_qp.h"],
    deps = [
        ":gripper_brick",
        "//multibody/plant",
        "//solvers:mathematical_program_lite",
        "//solvers:solve",
        "//systems/controllers:state_feedback_controller_interface",
        "//systems/framework:leaf_system",
    ],
)

drake_cc_library(
    name = "publish_frames_to_lcm",
    srcs = ["publish_frames_to_lcm.cc"],
    hdrs = ["publish_frames_to_lcm.h"],
    deps = [
        "//lcm:interface",
        "//lcmtypes:viewer",
    ],
)

drake_cc_binary(
    name = "planar_gripper_simulation",
    srcs = ["planar_gripper_simulation.cc"],
    add_test_rule = 1,
    data = [
        "//examples/planar_gripper:planar_brick.sdf",
        "//examples/planar_gripper:planar_gripper.sdf",
        "//examples/planar_gripper:postures.txt",
    ],
    test_rule_args = [
        "--simulation_time=0.1",
        "--target_realtime_rate=0",
    ],
    deps = [
        ":planar_gripper_common",
        "//common:find_resource",
        "//common:text_logging_gflags",
        "//common/trajectories:piecewise_polynomial",
        "//geometry:geometry_visualization",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/analysis:simulator",
        "//systems/controllers:inverse_dynamics_controller",
        "//systems/framework:diagram",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:trajectory_source",
        "@gflags",
        "@lcmtypes_robotlocomotion",
    ],
)

drake_cc_library(
    name = "gripper_brick_planning_constraint_helper",
    srcs = ["gripper_brick_planning_constraint_helper.cc"],
    hdrs = ["gripper_brick_planning_constraint_helper.h"],
    deps = [
        ":gripper_brick",
        "//multibody/inverse_kinematics:kinematic_constraint",
        "//solvers:mathematical_program_lite",
    ],
)

drake_cc_binary(
    name = "planar_finger_simulation",
    srcs = ["planar_finger_simulation.cc"],
    add_test_rule = 1,
    data = [
        "//examples/planar_gripper:1dof_brick.sdf",
        "//examples/planar_gripper:fixed_surface.sdf",
        "//examples/planar_gripper:planar_finger.sdf",
    ],
    test_rule_args = [
        "--simulation_time=0.1",
        "--target_realtime_rate=0",
    ],
    deps = [
        ":finger_brick",
        "//common:find_resource",
        "//common:text_logging_gflags",
        "//geometry:geometry_visualization",
        "//multibody/parsing",
        "//multibody/plant",
        "//multibody/plant:contact_results_to_lcm",
        "//systems/analysis:simulator",
        "//systems/controllers:inverse_dynamics_controller",
        "//systems/framework:diagram",
        "//systems/primitives:adder",
        "//systems/primitives:constant_value_source",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:multiplexer",
        "//systems/primitives:sine",
        "@gflags",
    ],
)

drake_cc_binary(
    name = "finger_ground_force_regulation",
    srcs = ["finger_ground_force_regulation.cc"],
    add_test_rule = 1,
    data = [
        "//examples/planar_gripper:fixed_surface.sdf",
        "//examples/planar_gripper:planar_finger.sdf",
    ],
    test_rule_args = [
        "--simulation_time=0.1",
        "--target_realtime_rate=0",
    ],
    deps = [
        "//common:find_resource",
        "//common:text_logging_gflags",
        "//geometry:geometry_visualization",
        "//multibody/parsing",
        "//multibody/plant",
        "//multibody/plant:contact_results_to_lcm",
        "//systems/analysis:simulator",
        "//systems/framework:diagram",
        "//systems/lcm:connect_lcm_scope",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:demultiplexer",
        "//systems/primitives:multiplexer",
        "//systems/primitives:sine",
        "//systems/primitives:zero_order_hold",
        "@gflags",
    ],
)

drake_cc_googletest(
    name = "gripper_brick_test",
    deps = [
        ":gripper_brick",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "brick_static_equilibrium_constraint_test",
    deps = [
        ":brick_static_equilibrium_constraint",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:compute_numerical_gradient",
    ],
)

drake_cc_googletest(
    name = "gripper_brick_planning_constraint_helper_test",
    deps = [
        ":gripper_brick_planning_constraint_helper",
        "//solvers:solve",
    ],
)

drake_cc_googletest(
    name = "planar_finger_qp_test",
    data = [
        "//examples/planar_gripper:1dof_brick.sdf",
        "//examples/planar_gripper:fixed_surface.sdf",
        "//examples/planar_gripper:planar_finger.sdf",
    ],
    deps = [
        ":finger_brick",
        ":planar_finger_qp",
        "//common:find_resource",
        "//geometry:geometry_visualization",
        "//multibody/inverse_kinematics",
        "//multibody/parsing",
        "//multibody/plant",
        "//solvers:solve",
        "//systems/framework:diagram",
    ],
)

drake_cc_binary(
    name = "brick_qp_simulation",
    srcs = ["test/brick_qp_simulation.cc"],
    add_test_rule = 1,
    data = [
        "//examples/planar_gripper:1dof_brick.sdf",
    ],
    test_rule_args = [
        "--simulation_time=0.1",
        "--target_realtime_rate=0",
    ],
    deps = [
        ":brick_qp",
        ":finger_brick",
        "//common:find_resource",
        "//common:text_logging_gflags",
        "//common/proto:call_python",
        "//examples/planar_gripper:publish_frames_to_lcm",
        "//geometry:geometry_visualization",
        "//multibody/parsing",
        "//multibody/plant",
        "//multibody/plant:contact_results_to_lcm",
        "//systems/analysis:simulator",
        "//systems/framework:diagram",
        "//systems/primitives:adder",
        "//systems/primitives:constant_value_source",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:multiplexer",
        "//systems/primitives:signal_logger",
        "//systems/primitives:sine",
        "//systems/primitives:trajectory_source",
        "//multibody/plant:spatial_forces_to_lcm",
        "@gflags",
    ],
)

add_lint_tests()
